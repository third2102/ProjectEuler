// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


//Not many ways to improve the speed here other than pre-programming the sequence
timer(p2);
function p2(){
  var total = 0,num1 = 1,num2 = 1, newnum = 0;
  while (num2 < 4000000){ //generate numbers until one exceeds 4 million
    newnum = num1 + num2; //temporarily store the new number so we can shift the old ones
    num1 = num2;
    num2 = newnum;
    if (num2 % 2 == 0){ //check if the newly generated number is divisible by 2 and then add it to the total
      total+= num2;
    }
  }
  console.log(total);
}



//Custom Timer Function for measuring speed
function timer(someFunction){
  var time1 = process.hrtime();
  someFunction(); // run whatever needs to be timed in between the statements
  var time2 = process.hrtime();
  var seconds = time2[0] - time1[0];
  var nano = time2[1] - time1[1];
  var timedif = Math.floor(seconds*1000000 + nano/1000)/1000;
  var timedifstring = timedif.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
  console.log("Took " + timedifstring + " ms");
  return timedif;
  //this should reset the cache
  var total = 0;
}
